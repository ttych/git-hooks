#!/bin/sh
# -*- mode: sh -*-


SCRIPT_PATH="$(cd ${0%/*}; pwd)"
FORCE=false
GENERIC_HOOK="$SCRIPT_PATH/../hooks/generic-hook"

true()
{
    return 0
}

false()
{
    return 1
}

git_dir()
{
    git_dir=$(git rev-parse --git-dir 2>/dev/null)
}

git_hooks_l()
{
    git_hooks_list "$@"
}

git_hooks_list()
{
    git_hooks_list_print "TYPE" "NAME"
    for git_hooks_list__d in "$SCRIPT_PATH/../hooks"/*/; do
        git_hooks_prints "$git_hooks_list__d"
    done
}

LIST_FORMAT="| %-20s | %-40s |\n"
git_hooks_list_print()
{
    printf "$LIST_FORMAT" "$1" "$2"
}

git_hooks_prints()
(
    cd "$1" 2>/dev/null || return 1
    git_hooks_prints__type="${1%/}"
    git_hooks_prints__type="${git_hooks_prints__type##*/}"

    find . -type f | while read git_hooks_prints__f; do
        [ -r "$git_hooks_prints__f" ] || continue
        git_hooks_list_print "$git_hooks_prints__type" "${git_hooks_prints__f#./}"
    done
)

git_hooks_i()
{
    git_hooks_install "$@"
}

git_hooks_install()
{
    git_dir || return 1
    # FIXME
    :
}

git_hooks_I()
{
    git_hooks_installed "$@"
}

git_hooks_installed()
(
    git_dir || return 1
    cd "$git_dir/hooks" || return 1
    git_hooks_prints
)

git_hooks_u()
{
    git_hooks_uninstall "$@"
}

git_hooks_uninstall()
{
    # FIXME
    :
}

git_hooks_h()
{
    git_hooks_help "$@"
}

git_hooks_help()
{
    cat <<EOF
Usage is :
      $0 [-h] [-D] <action> <action_parameters>

with action in :
     h|help
     l|list
     i|install
     I|installed
     u|uninstall
EOF
}

git_hooks()
{
    git_hooks=

    git_hooks__force=false
    while getopts :hDf opt; do
        case $opt in
            h) git_hooks_help
               exit 0
               ;;
            f) FORCE=true ;;
            D) set -x ;;
        esac
    done
    shift $(($OPTIND - 1))

    git_hooks__action=
    case $1 in
        h|help|l|list|i|install|I|installed|u|uninstall|"")
            git_hooks__action="git_hooks_${1:-list}"
            [ $# -gt 0 ] && shift
            $git_hooks__action "$@"
            ;;
        *)
            echo >&2 "unknown action \"$1\""
            git_hooks_help
            exit 1
            ;;
    esac
}

case "$0" in
    */git-hooks)
        git_hooks "$@"
        ;;
esac
